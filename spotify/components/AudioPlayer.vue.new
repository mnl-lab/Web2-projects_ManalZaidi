<template>
  <div class="audio-player">
    <div class="track-info" v-if="currentTrack">
      <img 
        :src="currentTrack.album?.images[0]?.url || '/default-album.jpg'" 
        alt="Album Cover" 
        class="track-image"
      />
      <div class="track-details">
        <h4 class="track-name">{{ currentTrack.name }}</h4>
        <p class="track-artist">{{ currentTrack.artists[0].name }}</p>
      </div>
    </div>
    <div class="player-controls">
      <button @click="playPrevious" class="control-button">
        <i class="bi bi-skip-start-fill"></i>
      </button>
      <button @click="togglePlay" class="control-button play-button">
        <i :class="isPlaying ? 'bi bi-pause-circle-fill' : 'bi bi-play-circle-fill'"></i>
      </button>
      <button @click="playNext" class="control-button">
        <i class="bi bi-skip-end-fill"></i>
      </button>
    </div>
    <div class="volume-control">
      <i class="bi" :class="volumeIcon"></i>
      <input 
        type="range" 
        min="0" 
        max="100" 
        step="1" 
        v-model.number="volumeLevel"
        @input="setVolume"
        class="volume-slider"
      >
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, onBeforeUnmount, watch, computed } from 'vue';
import { usePlayerStore } from '~/composables/usePlayerStore';
import { getStoredAccessToken } from '~/composables/spotifyUsage';

// Use player store to get current track
const playerStore = usePlayerStore();

// Use the access token from the store or get it from storage
const accessToken = computed(() => {
  return playerStore.accessToken || getStoredAccessToken();
});

// Reactive state for player
const player = ref(null);
const deviceId = ref(null);
const isPlaying = ref(false);
const currentTrack = ref(null);
const volumeLevel = ref(50); // Default volume level

// Computed property for volume icon
const volumeIcon = computed(() => {
  if (volumeLevel.value === 0) {
    return 'bi-volume-mute-fill';
  } else if (volumeLevel.value < 30) {
    return 'bi-volume-off-fill';
  } else if (volumeLevel.value < 70) {
    return 'bi-volume-down-fill';
  } else {
    return 'bi-volume-up-fill';
  }
});

// Initialize the Spotify Web Playback SDK when component mounts
onMounted(() => {
  // Insert the Spotify Web Playback SDK script if not already present
  if (!window.Spotify) {
    const script = document.createElement('script');
    script.src = 'https://sdk.scdn.co/spotify-player.js';
    script.async = true;
    document.body.appendChild(script);

    // Once SDK is ready, call the setup function
    window.onSpotifyWebPlaybackSDKReady = setupPlayer;
  } else {
    // SDK already loaded
    setupPlayer();
  }
});

onBeforeUnmount(() => {
  // Disconnect the player when component is destroyed
  if (player.value) {
    player.value.disconnect();
  }
});

// Watch accessToken changes (e.g., on refresh) and re-initialize if needed
watch(
  accessToken,
  (newToken) => {
    if (player.value && newToken) {
      player.value._options.getOAuthToken((cb) => cb(newToken));
    }
  }
);

// Watch for track changes
watch(
  () => playerStore.currentTrackUri,
  async (newTrackUri) => {
    if (newTrackUri && deviceId.value) {
      await playOnDevice(deviceId.value, newTrackUri);
    }
  }
);

// Watch for playlist changes
watch(
  () => playerStore.currentPlaylistId,
  async (newPlaylistId) => {
    if (newPlaylistId && deviceId.value && playerStore.playbackType === 'playlist') {
      await playPlaylistOnDevice(deviceId.value, newPlaylistId);
    }
  }
);

// Watch for album changes
watch(
  () => playerStore.currentAlbumId,
  async (newAlbumId) => {
    if (newAlbumId && deviceId.value && playerStore.playbackType === 'album') {
      await playAlbumOnDevice(deviceId.value, newAlbumId);
    }
  }
);

/**
 * Sets up the Spotify Player instance and registers event listeners
 */
function setupPlayer() {
  player.value = new window.Spotify.Player({
    name: 'Vue Spotify Clone Player',
    getOAuthToken: (cb) => {
      // Provide the current access token to Spotify SDK
      cb(accessToken.value);
    },
    volume: volumeLevel.value / 100 // initial volume level
  });

  // Error handling listeners
  player.value.addListener('initialization_error', ({ message }) => console.error('Init Error:', message));
  player.value.addListener('authentication_error', ({ message }) => console.error('Auth Error:', message));
  player.value.addListener('account_error', ({ message }) => console.error('Account Error:', message));
  player.value.addListener('playback_error', ({ message }) => console.error('Playback Error:', message));

  // Playback state updates
  player.value.addListener('player_state_changed', (state) => {
    if (!state) return;
    isPlaying.value = !state.paused;
    currentTrack.value = state.track_window.current_track;
    
    // Update the UI to show the player is active regardless of how playback was started
    if (playerStore.playbackType === 'none' && state.track_window.current_track) {
      playerStore.playTrack(`spotify:track:${state.track_window.current_track.id}`);
    }
  });

  // When the player is ready, save the device ID and transfer playback
  player.value.addListener('ready', ({ device_id }) => {
    deviceId.value = device_id;
    transferPlayback(device_id);
  });

  // Connect to the player
  player.value.connect();
}

/**
 * Plays a track on the specified device
 * @param {string} deviceId - The device ID to play on
 * @param {string} trackUri - The track URI to play
 */
async function playOnDevice(deviceId, trackUri) {
  try {
    const response = await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${accessToken.value}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        uris: [trackUri]
      }),
    });
    
    if (!response.ok) {
      console.error('Failed to play track:', await response.text());
    }
  } catch (error) {
    console.error('Error playing track:', error);
  }
}

/**
 * Plays a playlist on the specified device
 * @param {string} deviceId - The device ID to play on
 * @param {string} playlistId - The playlist ID to play
 */
async function playPlaylistOnDevice(deviceId, playlistId) {
  try {
    const response = await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${accessToken.value}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        context_uri: `spotify:playlist:${playlistId}`
      }),
    });
    
    if (!response.ok) {
      console.error('Failed to play playlist:', await response.text());
    }
  } catch (error) {
    console.error('Error playing playlist:', error);
  }
}

/**
 * Plays an album on the specified device
 * @param {string} deviceId - The device ID to play on
 * @param {string} albumId - The album ID to play
 */
async function playAlbumOnDevice(deviceId, albumId) {
  try {
    const response = await fetch(`https://api.spotify.com/v1/me/player/play?device_id=${deviceId}`, {
      method: 'PUT',
      headers: {
        'Authorization': `Bearer ${accessToken.value}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        context_uri: `spotify:album:${albumId}`
      }),
    });
    
    if (!response.ok) {
      console.error('Failed to play album:', await response.text());
    }
  } catch (error) {
    console.error('Error playing album:', error);
  }
}

/**
 * Transfers playback to this Web Playback SDK device
 * @param {string} id - The device ID from the SDK
 */
function transferPlayback(id) {
  fetch('https://api.spotify.com/v1/me/player', {
    method: 'PUT',
    headers: {
      'Authorization': `Bearer ${accessToken.value}`,
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      device_ids: [id],
      play: false,
    }),
  });
}

/**
 * Toggles between play and pause
 */
function togglePlay() {
  if (!player.value) return;
  if (isPlaying.value) {
    player.value.pause();
  } else {
    player.value.resume();
  }
}

/**
 * Skips to the next track
 */
function playNext() {
  player.value?.nextTrack();
}

/**
 * Goes back to the previous track
 */
function playPrevious() {
  player.value?.previousTrack();
}

/**
 * Sets the volume level
 */
function setVolume() {
  if (player.value) {
    // Convert from 0-100 scale to 0-1 scale that Spotify expects
    const normalizedVolume = volumeLevel.value / 100;
    player.value.setVolume(normalizedVolume);
  }
}
</script>

<style scoped>
.audio-player {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 1rem;
  height: 100%;
  padding: 0 16px;
}

.track-info {
  display: flex;
  align-items: center;
  max-width: 350px;
  overflow: hidden;
}

.track-image {
  width: 50px;
  height: 50px;
  border-radius: 4px;
  margin-right: 12px;
  object-fit: cover;
}

.track-details {
  overflow: hidden;
}

.track-name {
  font-size: 14px;
  font-weight: 500;
  margin: 0;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  color: var(--text-primary);
}

.track-artist {
  font-size: 12px;
  margin: 4px 0 0;
  color: var(--text-secondary);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.player-controls {
  display: flex;
  align-items: center;
  gap: 16px;
  margin-right: 24px;
}

.control-button {
  background: transparent;
  border: none;
  color: var(--text-primary);
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  padding: 8px;
  transition: all 0.2s;
  border-radius: 50%;
}

.control-button:hover {
  color: var(--color-light-purple);
}

.play-button {
  font-size: 32px;
}

.play-button i {
  margin-top: -2px;
}

.volume-control {
  display: flex;
  align-items: center;
  gap: 8px;
  width: 150px;
}

.volume-slider {
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: 4px;
  border-radius: 2px;
  background: var(--text-secondary);
  outline: none;
  cursor: pointer;
}

.volume-slider::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: var(--color-light-purple);
  cursor: pointer;
}

.volume-slider::-moz-range-thumb {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  background: var(--color-light-purple);
  cursor: pointer;
  border: none;
}
</style>
